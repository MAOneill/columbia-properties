const Property = require('../models/property');
const Employee = require('../models/employee');
const Photo = require('../models/photo');
const Media = require('../models/media');
const utils = require('./utils');

//master show property fucntion so i don't rewrite it 5 times...
//modified to pass in the property id, because we don't always get this from a form
async function showProperty(PropID, mymessage,newflag, req, res) {

    console.log("the body propid is ", PropID);
    let allPictures = [];
    let theProperty = [];
    let allMedia = [];
    //this variable is essentiall global i think
    if (req.session.userId) {

        if (!newflag) {
        //get the properties from database
        theProperty = await Property.getById(parseInt(PropID));

        //get pictures to select
        //if a new blank property, this is an empty array!
        allPictures = await Photo.getAllforProperty(PropID);

        allMedia = await Media.getAllforProperty(PropID);
        // console.log(allMedia);
        }
        // console.log(allPictures);
        //if allpictures is blank - just send an empty object...
        //because this could happen too...
        //DO I NEED THIS?  I'M SETTING A DEFAULT EMPTY ARRAY ABOVE, WILL IT GET OVERWRITTEN WITH NULL?
        if (!allPictures) {
            allPictures = [];
        }
        if (!allMedia) {
            allMedia = [];
        }

        //get employees for select
        const allEmployees = await Employee.getAll();

        //send the property.html page with all the details
        res.render('property',{locals:{message:mymessage,userid:req.session.userid,property:theProperty,allEmployees,allPictures,allMedia}});

    }
    else {
        //there is no valid user - don't allow anything
        res.redirect('/login');
    }


}

 function showOneProperty (req, res) {


    showProperty(req.body.propid,"",false, req, res) ;

    
}

 async function blankProperty (req, res) {
    //show the property html form with all blanks

    //new - create a new db entry with only a name and the autogenerated id
    const newIdInfo = await Property.addNewBlank();
    const newPropID = newIdInfo.rows[0].id;
    console.log("the newest property id is ", newPropID);

    //still check that the user is log in - this is done in showProperty.

    showProperty(newPropID,"Enter details and hit save",false, req, res)
}

async function saveProperty (req, res) {
    //take all fields from form in req.body
    //convert check boxes to true/false
    console.log("what is in the req.body for mediaid????");
    console.log(req.body);


    const showmp = utils.convertCheckboxBoolean(req.body.showmp);
    const showdi = utils.convertCheckboxBoolean(req.body.showdi);
    const showpd = utils.convertCheckboxBoolean(req.body.showpd);

    //scrub any data with utility funciton.  the tinymce block gets speical handling
    const cleanDescription = utils.escapeQuotes(req.body.description);
    
    //clean all the other text fields
    
    const cleanPropertyName = utils.escapeHtml(req.body.propertyname);
    const cleanStreetAddress = utils.escapeHtml(req.body.streetaddress);
    const cleanCounty = utils.escapeHtml(req.body.county);
    const cleanCity = utils.escapeHtml(req.body.city);
    const cleanState = utils.escapeHtml(req.body.state);
    const cleanZipCode = utils.escapeHtml(req.body.zipcode);
    const cleanDirections = utils.escapeHtml(req.body.directions);
    const cleanType = utils.escapeHtml(req.body.type);
    const cleanPDDescription = utils.escapeHtml(req.body.pddescription);
    const cleanTenants = utils.escapeHtml(req.body.majortenants);
    
    
    //convert numerica values to NUMERIC
    const id = utils.covertToNull(req.body.propid);
    const yearopen = utils.covertToNull(req.body.yearopen);
    const contactid = utils.covertToNull(req.body.contactid);
    const sqfeet = utils.covertToNull(req.body.squarefeet);
    const photoid = utils.covertToNull(req.body.photoid);
    const mapx = utils.covertToNull(req.body.mapx);
    const mapy = utils.covertToNull(req.body.mapy);
    const sortOrder = utils.covertToNull(req.body.sortorder);
    

console.log("The id of the property is", id);

    //create an instance of a Property Object
const updateProperty = new Property(id, cleanPropertyName, cleanStreetAddress, cleanCounty, cleanCity, cleanState, cleanZipCode, sqfeet, cleanDescription, cleanDirections, contactid, cleanType, showmp, showdi, showpd, cleanPDDescription, yearopen, cleanTenants, photoid, mapx, mapy, sortOrder);   

console.log("the property object after being int the form......");
console.log(updateProperty);


//the propid will be null or blank when adding a new property
//it will be populated when saving
if (req.body.propid) {

    //save to database using newProperty.save()
    console.log(("the propid is ", req.body.propid));

    //update the media database:
    //first make all media references false for don't show
    await Media.setAllMediaFalse(req.body.propid);
    //then if they were selected, set them to true
    //the media ids are stored in the array req.body.mediaid
    // I have to handle if there are no media files selected

    //new twist - if there is ONLY one MEDIA ID, it won't be in an array....ugh
    if (req.body.mediaid) {

        console.log("the type of mediaid is :" , typeof req.body.mediaid);
        
        //only one
        if ((typeof req.body.mediaid) === "string") {
            console.log("tis a string");
            await Media.setDisplayTrue(req.body.mediaid);
        }
        else {  //an array of media ids
            req.body.mediaid.forEach( async (id) =>  {
                await Media.setDisplayTrue(id);
            })

        }
    }
   

    await updateProperty.save()
    .catch((err) => console.log("SOMTHING BLEW UP", err));

    //redisplay that property to the user with a message of 'changes saved'
    //i really want to just call my showOneProperty function above, but I cant change the message in the locals


    showProperty(req.body.propid,"Changes Saved",false, req, res);
}    

else {  //this is for when there is no property id.  this shouldn't happen now..
    //get the new id...
    //i left this code in here, 
    //but this else shuold never get called now because I will create a new property first before ever
    //displaying the property.html page.  so there will always be an id
    const mynewprop = await updateProperty.addNew();
    console.log(mynewprop.rows[0].id);  
    console.log('THE SQL FORM THE INSERT IS', mynewprop);

    res.redirect('/main')
    

    }
//if the id is null - INSERT
//otherwise UPDATE
}


async function uploadImage (req, res) {
    //using express-fileupload - it will b4e in the req.files object
    // console.log("the property image is ", req.files.properyimage);
    
        if (Object.keys(req.files).length == 0) {
          return res.status(400).send('No files were uploaded.');
        }
      
        let sampleFile = (req.files.properyimage ? req.files.properyimage : "bad_file_name.xxx");
    //   console.log(sampleFile.name);
        //get a unique number based on date and user id:
        let userid = (req.session.userId ? req.session.userId : 0).toString() ;
        let date = new Date();
        let seconds = parseInt(date.getTime() / 1000).toString();
        let fileName = userid + seconds + sampleFile.name;
        sampleFile.mv(`./public/propertyphotos/${fileName}`, async function(err) {
          if (err) {

              return res.status(500).send(err);
          }
       
          //   res.send('File uploaded!');
  
          // save the data to the database
          await Photo.addPhoto(req.body.propid,`propertyphotos/${fileName}`, fileName) ;
          
          showProperty(req.body.propid,"Image uploaded",false, req, res)

      
        });

}
async function uploadMedia (req, res) {
    if (Object.keys(req.files).length == 0) {
        return res.status(400).send('No files were uploaded.');
      }
    
      let sampleFile = (req.files.mediaimage ? req.files.mediaimage : "bad_file_name.xxx");
  //   console.log(sampleFile.name);
      //get a unique number based on date and user id:
      let userid = (req.session.userId ? req.session.userId : 0).toString() ;
      let date = new Date();
      let seconds = parseInt(date.getTime() / 1000).toString();
      let fileName = userid + seconds + sampleFile.name;

      sampleFile.mv(`./public/mediafiles/${fileName}`, async function(err) {
        if (err) {

            return res.status(500).send(err);
        }
     
        //   res.send('File uploaded!');

        // save the data to the database
        await Media.addMedia(req.body.mediapropid,`mediafiles/${fileName}`, req.body.filetitle, true) ;

        //and reload the property page
        showProperty(req.body.mediapropid,"Image uploaded",false, req, res);

    
      });

}


module.exports = {showOneProperty, saveProperty, blankProperty, uploadImage, uploadMedia};